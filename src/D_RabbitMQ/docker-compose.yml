version: '3.8'

services:
  rabbitmq:
    image: rabbitmq:3-management
    hostname: rabbitmq
    ports:
      - "5672:5672" # AMQP protocol port
      - "15672:15672" # Management UI port
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  postgres:
    image: postgres:16
    hostname: postgres
    environment:
      POSTGRES_DB: paymentdb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d paymentdb"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data

  web-api:
    build:
      context: ./RabbitQueue.WebApi
      dockerfile: Dockerfile
    ports:
      - "8080:8080" # Map container port 8080 to host port 8080
    environment:
      # Use the service names defined in docker-compose for hostnames
      RABBITMQ_HOST: rabbitmq
      POSTGRES_HOST: postgres
      ASPNETCORE_URLS: http://+:8080 # Listen on all interfaces inside the container
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: on-failure

  consumer-service:
    build:
      context: ./RabbitQueue.Consumer
      dockerfile: Dockerfile
    environment:
      RABBITMQ_HOST: rabbitmq
      POSTGRES_HOST: postgres
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: on-failure

volumes:
  rabbitmq_data:
  postgres_data: