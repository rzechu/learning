services:
  rabbitmq:
    image: rabbitmq:3-management
    hostname: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 5s
      timeout: 10s
      retries: 10
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  postgres:
    image: postgres:16
    hostname: postgres
    environment:
      POSTGRES_DB: paymentdb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d paymentdb"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data

  web-api:
    build:
      context: ./RabbitQueueMB.WebApi
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      RABBITMQ_HOST: rabbitmq
      POSTGRES_HOST: postgres
      ASPNETCORE_URLS: http://+:8080
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: on-failure

  consumer-service:
    build:
      context: ./RabbitQueueMB.Consumer
      dockerfile: Dockerfile
    environment:
      RABBITMQ_HOST: rabbitmq
      POSTGRES_HOST: postgres
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: on-failure

  notification-service:
    build:
      context: ./RabbitQueueMB.NotificationService
      dockerfile: Dockerfile
    environment:
      RABBITMQ_HOST: rabbitmq
    depends_on:
      rabbitmq:
        condition: service_healthy

  alert-service:
    build:
      context: ./RabbitQueueMB.AlertService
      dockerfile: Dockerfile
    environment:
      RABBITMQ_HOST: rabbitmq
    depends_on:
      rabbitmq:
        condition: service_healthy

  analytics-service:
    build:
      context: ./RabbitQueueMB.AnalyticsService
      dockerfile: Dockerfile
    environment:
      RABBITMQ_HOST: rabbitmq
    depends_on:
      rabbitmq:
        condition: service_healthy

volumes:
  rabbitmq_data:
  postgres_data: